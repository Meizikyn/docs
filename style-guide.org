#+TITLE: CXX QSR
#+TODO: TODO | DONE
#+TODO: PROPOSAL PROPOSED | ACCEPTED REJECTED


* Foreword
  Some of the content in this style code may seem like common sense to the
  seasoned developer; yet as the project grows and the team with it, it is
  important to have an established point of reference for company best-practices
  and team procedures.

  To have these ideas officially documented allows consistency in the code base,
  while also implying certain goals and assumptions about development.

  To have such a guide followed also allows tools to make these same
  assumptions without greater efforts to allow outliers, such as shared editor
  configurations, linters, documentation generators, etc.

* Objectives
  This style guide is written from analyzing the existing code base and
  standardizing what the team has already become accustomed to. Consistency is
  the most important principle to keep in mind. Requests for changes are
  preferred to be pull requests for a modified style document.

  + Design for the reader, not the writer ::
    Developing a strong API means clean syntax, and an easy read.
    Complex C++ syntax and advanced structures beyond the reasoning
    of an average C++ programmer defeat the principle objective of an API,
    to be shared.

    Simplistic and less expressive syntax also allows for faster re-entry into
    the code base. You understanding of the code today may differ drastically
    after 3 months from now.

  + Do not commit bugs ::
    If your submission includes any undefined, unexpected, or otherwise
    unintended behavior, even in fringe cases, do not commit. Fix it before
    committing and moving on.

    Code written on a faulty foundation means harder-to-track bugs

* QSR

  _Style is heavily based on LLVM style standard_

  + Use new-line braces everywhere (if, else, functions, structures, typedefs, classes, etc.) :: 
  #+BEGIN_SRC c++
  if (x) {
  }
  #+END_SRC

  + ~else~ statements begin on a new line :: 
  #+BEGIN_SRC c++
  if (x) {
  }
  else {
  }
  #+END_SRC

  + Always specify types before every identifier names, do not use compound assignments ::
  Do This
  #+BEGIN_SRC c++
  int x = 0;
  int y = 0;
  #+END_SRC
 
  Not This
  #+BEGIN_SRC c++
  int x, y = 0;
  #+END_SRC

  + All identifiers are in camelCase ::
  #+BEGIN_SRC c++
  bool camelCase = true;
  bool IsCamelCase() {
    return true;
  }
  class CamelClass {
    public:
      int mSomeVar;
    protected:
      bool mSomeOtherVal = false;
  }
  #+END_SRC

  + Variable names start with a lower case ::
  #+BEGIN_SRC c++
  int myVariable;
  #+END_SRC

  + Constant globals are marked with a lower-case `k` prefix ::
  #+BEGIN_SRC c++
  const ushort kMyConst = 5;
  #+END_SRC

  + Pointer asterisks are glued to the identifier ::
  #+BEGIN_SRC c++
  int *thisPointer;
  ushort **thatPointer;
  const int *kMyPointer;
  // notice space for pointers to constant data
  int * const myConst; // data is constant
  const int * const kMyConst; // pointer and data are const 
  #+END_SRC

  + Function names start with an upper case ::
  #+BEGIN_SRC c++
  void DoReverseLookup(const int id);
  #+END_SRC

  + Function names should always start with a verb, unless they can't ::
  #+BEGIN_SRC c++
  void CopyEmployeeRecord(const Employee *src, Employee *dst);
  // Record could be either a noun or a verb, use reasonable discretion with how you handle this.
  // If you believe youjr opinion may need elaborating, document your function's naming convention.
  void DoRecordData(const Entry *entry, Table *table);
  #+END_SRC
 
  Reasonable exceptions are for pure functions with no side-effects ::
  #+BEGIN_SRC c++
  int Permutation(const int x);
  #+END_SRC

  + Function names should be convey meaning with reasonable verbosity ::
  #+BEGIN_SRC c++
  void RenderAnimation(const Mesh *mesh, const Frame *frames);
  #+END_SRC

  Not too long...
  #+BEGIN_SRC c++
  void RenderAnimationWithMeshAndFramesPointer(const Mesh *mesh,
                                               const Frame *frames);
  #+END_SRC

  or too short...
  #+BEGIN_SRC c++
  void RndrAnim(const Mesh *mesh, const Frame *frames);
  #+END_SRC

  + Function overloading should be avoided, as it leads to reading obfuscations that outweigh the writer's conveniences ::

  Instead of this
  #+BEGIN_SRC c++
  Student db::QueryStudent(const uint pk);
  Student db::QueryStudent(const String name);
  Student db::QueryStudent(const UUID id);
  #+END_SRC

  Do this
  #+BEGIN_SRC c++
  Student db::QueryStudentByKey(const uint pk);
  Student db::QueryStudentByName(const String name);
  Student db::QueryStudentByID(const UUID id);
  #+END_SRC

  + Everything is a constant, unless it can't be ::

  This lets the reader know what is and is not subject to change.
  #+BEGIN_SRC c++
  void DeleteEntries(const uint idFirst, const uint idRange, Table *table);
  #+END_SRC

  + Additional Notes ::

  Avoid global variables wherever possible, unless they can be justified
     
