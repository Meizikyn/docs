#+TITLE: CXX QSR
#+TODO: TODO | DONE
#+TODO: PROPOSAL PROPOSED | ACCEPTED REJECTED


  + Use new-line braces everywhere (if, else, functions, structures, typedefs, classes, etc.) :: 
  #+BEGIN_SRC c++
  if (x) {
  }
  #+END_SRC

  + ~else~ statements follow closing braces :: 
  #+BEGIN_SRC c++
  if (x) {
  } else {
  }
  #+END_SRC

  + All identifiers are in camelCase ::
  #+BEGIN_SRC c++
  bool camelCase = true;
  bool IsCamelCase() {
    return true;
  }
  class CamelClass {
    public:
      int mSomeVar;
    protected:
      bool mSomeOtherVal = false;
  }
  #+END_SRC

  + Variable names start with a lower case ::
  #+BEGIN_SRC c++
  int myVariable;
  #+END_SRC

  + Constant globals are marked with a lower-case `k` prefix ::
  #+BEGIN_SRC c++
  const ushort kMyConst = 5;
  #+END_SRC

  + Pointer asterisks are glued to the identifier ::
  #+BEGIN_SRC c++
  int *thisPointer;
  ushort **thatPointer;
  const int *kMyPointer;
  // notice space for pointers to constant data
  int * const myConst; // data is constant
  const int * const kMyConst; // pointer and data are const 
  #+END_SRC

  + Function names start with an upper case ::
  #+BEGIN_SRC c++
  void DoReverseLookup(const int id);
  #+END_SRC

  + Function names should always start with a verb, unless they can't ::
  #+BEGIN_SRC c++
  void CopyEmployeeRecord(const Employee *src, Employee *dst);
  // Record could be either a noun or a verb, use reasonable discretion with how you handle this.
  // If you believe youjr opinion may need elaborating, document your function's naming convention.
  void DoRecordData(const Entry *entry, Table *table);
  #+END_SRC
 
  Reasonable exceptions are for pure functions with no side-effects ::
  #+BEGIN_SRC c++
  int Permutation(const int x);
  #+END_SRC

  + Function names should be convey meaning with reasonable verbosity ::
  #+BEGIN_SRC c++
  void RenderAnimation(const Mesh *mesh, const Frame *frames);
  #+END_SRC

  Not too long...
  #+BEGIN_SRC c++
  void RenderAnimationWithMeshAndFramesPointer(const Mesh *mesh,
                                               const Frame *frames);
  #+END_SRC

  or too short...
  #+BEGIN_SRC c++
  void RndrAnim(const Mesh *mesh, const Frame *frames);
  #+END_SRC

  + Function overloading should have strong typing principles applied ::

  Instead of this
  #+BEGIN_SRC c++
  Student db::QueryStudent(const int pk);
  Student db::QueryStudent(const String name);
  Student db::QueryStudent(const long uuid);
  #+END_SRC

  Do this
  #+BEGIN_SRC c++
  Student db::QueryStudent(const PrimaryKey pk);
  Student db::QueryStudent(const Name name);
  Student db::QueryStudent(const UUID uuid);
  #+END_SRC

  + Everything is a constant, unless it can't be ::

  This lets the reader know what is and is not subject to change.
  #+BEGIN_SRC c++
  void DeleteEntries(const uint idFirst, const uint idRange, Table *table);
  #+END_SRC


  + Comment classes with headers ::
  #+BEGIN_SRC c++
  /*
  ============================================================
  
      Class Name
  
  ============================================================
  */
  #+END_SRC
  
  + Similar for function and method headers
  #+BEGIN_SRC c++
  /*
  ========================================
  FunctionName
  
    Brief on functions purpose, no matter
    how obvious it may seem.
  ========================================
  */
  #+END_SRC

  + Additional Notes ::

  Avoid global variables wherever possible, unless they can be justified
     
